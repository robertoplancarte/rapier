PROGRAMA ::= 'program' '(' 'id' ')' '{' (VARS* FUNCTION* ESTATUTO*)* '}'
VARS ::= TIPO 'id' (',' 'id')* ('=' EXP)? ';'
FUNCTION ::= TIPO 'id' '(' PARAMS (',' PARAMS)* ')' '{' VARS* ESTATUTO* '}'
PARAMS ::= TIPO 'id'
TIPO ::= ( 'int' | 'float' | 'char' | 'string' )?
BLOQUE ::= '{' ESTATUTO* '}'
ESTATUTO ::= (ASIGNACION | CONDICION | ESCRITURA | LECTURA | CICLO)
ASIGNACION ::= 'id' '=' '(' EXPRESION ')' ';'
ESCRITURA ::= ('out' '(' (EXPRESION | 'string') ')' ';' | 'fout' '(' (EXPRESION | 'string') ',' 'cte file' ')' ';' )
LECTURA ::= ('in' '(' 'id' ')' ';' | 'fin' '(' 'id' ',' 'cte file' ')' ';' )
EXPRESION ::= EXP (( '>' | '<' | '<>' ) EXP )?
CONDICION ::= 'if' '(' EXPRESION ')' BLOQUE ('else' BLOQUE)?
CICLO ::= (WHILE | FOR)?
WHILE ::= 'while' '(' EXPRESION ')' BLOQUE
FOR ::= 'for' '(' ASIGNACION ';' EXPRECION ';' ASIGNACION ')' BLOQUE
EXP ::= (TERMINO | ('+' | '-'))
TERMINO ::= (FACTOR | ('*' | '/'))
FACTOR ::= ('(' EXPRESION ')' | ('+' | '-')? VAR_CTE)
VAR_CTE ::= ( 'ID' | 'cte int' | 'cte float' | 'cte char' | 'cte string' | 'cte file')?
